HashCats.com Development Instructions
Version A: Beginner-Friendly Guide
Overview for Assistants
When helping with development:

Break down complex concepts into simple terms
Provide detailed, step-by-step guidance
Confirm understanding at key points
Explain WHY each step is important
Help troubleshoot common issues
Celebrate small wins and progress

Response Structure
1. Initial Check-in
CopyðŸŽ“ Before We Start:
- What part are you working on?
- Have you run into any errors?
- What did you last successfully complete?
- What tools do you have open right now?

ðŸ’¡ Quick Plan:
- Here's what we'll build
- Here's why it's important
- Here's how we'll do it step by step
2. Implementation Guide
Break every task into micro-steps:
Copy1. Environment Check:
   âœ… Is WordPress running?
   âœ… Is your React dev server running?
   âœ… Are you in the right directory?

2. Making Changes:
   a. First, let's understand the current code
   b. Here's what we're changing
   c. Here's why we're making this change

3. Testing Our Changes:
   - What you should see
   - Common errors and fixes
   - How to verify it's working
3. Progress Validation
CopyðŸŽ¯ Progress Check:

Can you see:
âœ… [Expected result]
âœ… [Specific feature]
âœ… [Visual confirmation]

If not, let's check:
1. Common issue #1 (with fix)
2. Common issue #2 (with fix)
3. Other troubleshooting steps

Version B: Technical Implementation Guide
Project Structure
Copymy-headless-wp/
â”œâ”€â”€ frontend/                 # React application
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/      # React components
â”‚   â”‚   â”‚   â”œâ”€â”€ studio/     # Studio components
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ common/    # Shared components
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ utils/     # AI tool components
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ creative/  # Art creation components
â”‚   â”‚   â”œâ”€â”€ pages/          # Page components
â”‚   â”‚   â”œâ”€â”€ services/       # API services
â”‚   â”‚   â””â”€â”€ contexts/       # React contexts
â”‚   â””â”€â”€ package.json
â””â”€â”€ wordpress/              # WordPress installation
Component Architecture
1. Studio Components
jsxCopy// Base Layout Component (StudioLayout.jsx)
const StudioLayout = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-900">
      <div className="container mx-auto px-4 py-8">
        {children}
      </div>
    </div>
  );
};

// AI Tool Component Template
const AIToolComponent = () => {
  const [input, setInput] = useState(null);
  const [output, setOutput] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const processImage = async () => {
    try {
      setLoading(true);
      // Replicate API call here
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      {/* Component UI */}
    </div>
  );
};
API Integration
1. Replicate API Service
javascriptCopy// services/replicateService.js
const REPLICATE_API_TOKEN = process.env.REACT_APP_REPLICATE_API_TOKEN;

export const callReplicateAPI = async (modelVersion, input) => {
  const response = await fetch('https://api.replicate.com/v1/predictions', {
    method: 'POST',
    headers: {
      'Authorization': `Token ${REPLICATE_API_TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      version: modelVersion,
      input: input
    })
  });

  if (!response.ok) {
    throw new Error('API call failed');
  }

  return response.json();
};
Implementation Checklist
1. New Component Setup
Copy1. Create component file
2. Import dependencies
3. Set up state management
4. Add error handling
5. Implement loading states
6. Add component to pages
2. API Integration Steps
Copy1. Set up environment variables
2. Create API service
3. Implement error handling
4. Add request/response types
5. Create response handlers
Testing & Validation
1. Component Testing
javascriptCopy// Component test example
describe('AIToolComponent', () => {
  it('handles successful API calls', async () => {
    // Test implementation
  });

  it('handles API errors', async () => {
    // Test implementation
  });
});
2. Integration Testing
Copy1. Check WordPress API endpoints
2. Verify Replicate API responses
3. Test image upload/download
4. Validate error scenarios
Deployment Checklist
Copy1. Environment Variables:
   â–¡ WordPress URL
   â–¡ Replicate API key
   â–¡ Other API credentials

2. Build Process:
   â–¡ npm run build
   â–¡ Verify dist files
   â–¡ Check chunk sizes

3. WordPress Config:
   â–¡ CORS settings
   â–¡ API permissions
   â–¡ Media handling
Error Recovery Steps
Copy1. Development Issues:
   - Clear npm cache
   - Rebuild node_modules
   - Check environment variables

2. Runtime Issues:
   - Check API responses
   - Verify state management
   - Validate data flow
Remember: Start with the beginner version if unsure, then reference the technical guide for specific implementation details.